@page 
@model BookBorrowingSystem.Pages.Book.IndexModel
@{
    ViewData["Title"] = "Book List";
}

<head>
    <link rel="stylesheet" href="~/css/book.css" />
</head>

<h1 class="text-center my-4">Book List</h1>

<div class="container">
    <!-- Search Form -->
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">
            <form method="get" class="d-flex">
                <input type="text" name="searchTerm" value="@Model.SearchTerm" class="form-control me-2" 
                       placeholder="Search by book title or author..." />
                <button type="submit" class="btn btn-primary">Search</button>
                @if (!string.IsNullOrEmpty(Model.SearchTerm))
                {
                    <a href="/Book" class="btn btn-outline-secondary ms-2">Clear</a>
                }
            </form>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.SearchTerm))
    {
        <div class="row mb-3">
            <div class="col">
                <p class="text-muted">Search results for "<strong>@Model.SearchTerm</strong>" - @Model.Books.Count book(s) found</p>
            </div>
        </div>
    }
    
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var book in Model.Books)
        {
            <div class="col" >
                <div class="card h-100 book-card" 
                    @* data-bs-toggle="modal"
                    data-bs-target="#requestModal" *@
                    data-book-id="@book.BookId"
                     data-avaliable="@book.Avaliable">
                    @if (!string.IsNullOrEmpty(book.ImagePath))
                    {
                        <img src="@book.ImagePath" class="card-img-top" alt="Book cover">
                    }
                    else
                    {
                        <img src="/images/default-book.jpg" class="card-img-top" alt="Default cover" />
                    }
                    <div class="card-body">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="card-text"><strong>Author:</strong> @book.Author</p>
                        <p class="card-text"><strong>Available:</strong> @book.Avaliable / @book.Quantity</p>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (Model.Books.Count == 0)
    {
        <div class="row">
            <div class="col text-center mt-5">
                <div class="alert alert-info">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <h5>No books found</h5>
                        <p>No books match your search criteria "<strong>@Model.SearchTerm</strong>".</p>
                        <a href="/Book" class="btn btn-primary">View All Books</a>
                    }
                    else
                    {
                        <h5>No books available</h5>
                        <p>There are currently no books in the library.</p>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!--Modal-->
<div class="modal fade" id="requestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" id="requestModalContent">
            <!-- Nội dung form sẽ được load ở đây -->
        </div>
    </div>
</div>

<!-- Modal cảnh báo: Sách đã hết -->
<div class="modal fade" id="unavailableModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-warning">
            <div class="modal-header bg-warning">
                <h5 class="modal-title text-dark">Unavailable</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-dark">
                Sorry, this book is currently unavailable for borrowing.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <script>
        alert('@TempData["ErrorMessage"]');
    </script>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.book-card').forEach(card => {
                card.addEventListener('click', async function () {
                    const bookId = this.getAttribute('data-book-id');
                    const avaliable = parseInt(this.getAttribute('data-avaliable'));

                    if (avaliable <= 0) {
                        const warningModal = new bootstrap.Modal(document.getElementById('unavailableModal'));
                        warningModal.show();
                        return;
                    }

                    // Trước khi mở, clear modal content cũ và gỡ modal-backdrop nếu có
                    const modalContent = document.getElementById('requestModalContent');
                    modalContent.innerHTML = "<div class='text-center p-5'>Loading...</div>";

                    const response = await fetch(`/Request/Create?bookId=${bookId}`);
                    const html = await response.text();
                    modalContent.innerHTML = html;

                    const requestModalEl = document.getElementById('requestModal');
                    const requestModal = bootstrap.Modal.getOrCreateInstance(requestModalEl);
                    requestModal.show();

                    // 🧽 Gỡ modal backdrop nếu bị kẹt (dự phòng fallback sau khi đóng)
                    requestModalEl.addEventListener('hidden.bs.modal', () => {
                        document.querySelectorAll('.modal-backdrop').forEach(e => e.remove());
                        document.body.classList.remove('modal-open');
                        document.body.style = '';
                    }, { once: true });
                });
            });
        });
    </script>
}