// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250723165951_UpdateAccountModel")]
    partial class UpdateAccountModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Email = "admin@gmail.com",
                            Password = "123",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            AccountId = 2,
                            Email = "lib@gmail.com",
                            Password = "123",
                            Role = "Librarian",
                            Username = "librarian"
                        },
                        new
                        {
                            AccountId = 3,
                            Email = "stu1@gmail.com",
                            Password = "123",
                            Role = "User",
                            Username = "student"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Robert C. Martin",
                            Available = 5,
                            ImagePath = "/images/ThienDuongTungTang.jpg",
                            Quantity = 5,
                            Title = "Clean Code"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Andrew Hunt",
                            Available = 3,
                            ImagePath = "/images/ChienthuatTungTang.jpg",
                            Quantity = 3,
                            Title = "The Pragmatic Programmer"
                        });
                });

            modelBuilder.Entity("DAL.Entities.BorrowRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookId");

                    b.HasIndex("ProcessedById");

                    b.ToTable("BorrowRequests");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            AccountId = 3,
                            BookId = 1,
                            BorrowDate = new DateTime(2025, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            ProcessedById = 2,
                            RequestDate = new DateTime(2025, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            ReturnDate = new DateTime(2025, 7, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = "PENDING"
                        });
                });

            modelBuilder.Entity("DAL.Entities.BorrowRequest", b =>
                {
                    b.HasOne("DAL.Entities.Account", "Account")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Book", "Book")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Account", "ProcessedBy")
                        .WithMany("ProcessedRequests")
                        .HasForeignKey("ProcessedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Book");

                    b.Navigation("ProcessedBy");
                });

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Navigation("BorrowRequests");

                    b.Navigation("ProcessedRequests");
                });

            modelBuilder.Entity("DAL.Entities.Book", b =>
                {
                    b.Navigation("BorrowRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
